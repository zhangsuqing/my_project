{"remainingRequest":"E:\\workspace\\code\\test\\my_project\\node_modules\\babel-loader\\lib\\index.js!E:\\workspace\\code\\test\\my_project\\src\\utils\\request.js","dependencies":[{"path":"E:\\workspace\\code\\test\\my_project\\src\\utils\\request.js","mtime":1563023634830},{"path":"E:\\workspace\\code\\test\\my_project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\workspace\\code\\test\\my_project\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport store from '@/store'; // import { getToken } from '@/utils/auth'\n\nimport loading from '@/utils/loading';\nimport message from '@/utils/message'; // import { logout } from '@/api/login'\n\nimport { clearLoginInfo } from '@/utils';\nimport router from '@/router';\nvar codeMessage = {\n  404: '访问的网页不存在',\n  500: '服务器发生错误',\n  502: '网关错误。',\n  503: '服务暂时不可用，服务器暂时过载或维护，请稍后再访问。',\n  504: '连接超时，请稍后再试。' // create an axios instance\n\n};\naxios.defaults.withCredentials = true;\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_API_BASE_URL,\n  // api的base_url\n  timeout: 180000 // request timeout\n\n}); // request interceptor\n\nservice.interceptors.request.use(function (config) {\n  // Do something before request is sent\n  if (sessionStorage.getItem(\"token\")) {\n    config.headers['token'] = sessionStorage.getItem(\"token\"); // 让每个请求携带token-- ['X-Token']为自定义key 请根据实际情况自行修改\n  }\n\n  return config;\n}, function (error) {\n  // Do something with request error\n  console.log(error); // for debug\n\n  Promise.reject(error);\n}); // respone interceptor\n\nservice.interceptors.response.use(function (response) {\n  /**\r\n  * 下面的注释为通过response自定义code来标示请求状态，当code返回如下情况为权限有问题，登出并返回到登录页\r\n  * 如通过xmlhttprequest 状态码标识 逻辑可写在下面error中\r\n  */\n  var res = response.data;\n\n  if (res.code === 403) {\n    // logout().then(() => {\n    // location.reload()// 为了重新实例化vue-router对象 避免bug\n    clearLoginInfo();\n    router.push({\n      name: 'login'\n    });\n    return Promise.reject(response); // })\n    // return Promise.reject('error')\n  } else {\n    return response;\n  }\n}, function (error) {\n  loading.close(); // let err = '系统崩溃';\n  // if(error && error.response) {\n  //   err = codeMessage[error.response.status]?codeMessage[error.response.status]:err;\n  // }\n  // message.showError(2,err);\n  // return Promise.reject(err);\n\n  clearLoginInfo();\n  router.push({\n    name: 'login'\n  });\n  return Promise.reject(response);\n});\nexport default service;",{"version":3,"sources":["E:\\workspace\\code\\test\\my_project\\src\\utils\\request.js"],"names":["axios","store","loading","message","clearLoginInfo","router","codeMessage","defaults","withCredentials","service","create","baseURL","process","env","VUE_APP_API_BASE_URL","timeout","interceptors","request","use","config","sessionStorage","getItem","headers","error","console","log","Promise","reject","response","res","data","code","push","name","close"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,OAAP,MAAoB,iBAApB,C,CACA;;AACA,SAASC,cAAT,QAA+B,SAA/B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAMC,WAAW,GAAG;AAClB,OAAK,UADa;AAElB,OAAK,SAFa;AAGlB,OAAK,OAHa;AAIlB,OAAK,4BAJa;AAKlB,OAAK,aALa,CAQpB;;AARoB,CAApB;AAUAN,KAAK,CAACO,QAAN,CAAeC,eAAf,GAAiC,IAAjC;AACA,IAAMC,OAAO,GAAGT,KAAK,CAACU,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,oBADM;AACgB;AAC3CC,EAAAA,OAAO,EAAE,MAFkB,CAEX;;AAFW,CAAb,CAAhB,C,CAKA;;AACAN,OAAO,CAACO,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CAAiC,UAAAC,MAAM,EAAI;AACzC;AACA,MAAIC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAJ,EAAqC;AACnCF,IAAAA,MAAM,CAACG,OAAP,CAAe,OAAf,IAA0BF,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAA1B,CADmC,CACuB;AAC3D;;AACD,SAAOF,MAAP;AACD,CAND,EAMG,UAAAI,KAAK,EAAI;AACV;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAFU,CAES;;AACnBG,EAAAA,OAAO,CAACC,MAAR,CAAeJ,KAAf;AACD,CAVD,E,CAYA;;AACAd,OAAO,CAACO,YAAR,CAAqBY,QAArB,CAA8BV,GAA9B,CACE,UAAAU,QAAQ,EAAI;AACZ;;;;AAIE,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAArB;;AACA,MAAID,GAAG,CAACE,IAAJ,KAAa,GAAjB,EAAsB;AACpB;AACE;AACA3B,IAAAA,cAAc;AACdC,IAAAA,MAAM,CAAC2B,IAAP,CAAY;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAZ;AACA,WAAOP,OAAO,CAACC,MAAR,CAAeC,QAAf,CAAP,CALkB,CAMpB;AACA;AACD,GARD,MAQO;AACL,WAAOA,QAAP;AACD;AACF,CAlBH,EAmBE,UAAAL,KAAK,EAAI;AACPrB,EAAAA,OAAO,CAACgC,KAAR,GADO,CAEP;AACA;AACA;AACA;AACA;AACA;;AACA9B,EAAAA,cAAc;AACdC,EAAAA,MAAM,CAAC2B,IAAP,CAAY;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAZ;AACA,SAAOP,OAAO,CAACC,MAAR,CAAeC,QAAf,CAAP;AACD,CA9BH;AA+BA,eAAenB,OAAf","sourcesContent":["import axios from 'axios'\r\nimport store from '@/store'\r\n// import { getToken } from '@/utils/auth'\r\nimport loading from '@/utils/loading'\r\nimport message from '@/utils/message'\r\n// import { logout } from '@/api/login'\r\nimport { clearLoginInfo } from '@/utils'\r\nimport router from '@/router'\r\n\r\nconst codeMessage = {\r\n  404: '访问的网页不存在',\r\n  500: '服务器发生错误',\r\n  502: '网关错误。',\r\n  503: '服务暂时不可用，服务器暂时过载或维护，请稍后再访问。',\r\n  504: '连接超时，请稍后再试。',\r\n}\r\n\r\n// create an axios instance\r\n\r\naxios.defaults.withCredentials = true\r\nconst service = axios.create({\r\n  baseURL: process.env.VUE_APP_API_BASE_URL, // api的base_url\r\n  timeout: 180000 // request timeout\r\n})\r\n\r\n// request interceptor\r\nservice.interceptors.request.use(config => {\r\n  // Do something before request is sent\r\n  if (sessionStorage.getItem(\"token\")) {\r\n    config.headers['token'] = sessionStorage.getItem(\"token\") // 让每个请求携带token-- ['X-Token']为自定义key 请根据实际情况自行修改\r\n  }\r\n  return config\r\n}, error => {\r\n  // Do something with request error\r\n  console.log(error) // for debug\r\n  Promise.reject(error)\r\n})\r\n\r\n// respone interceptor\r\nservice.interceptors.response.use(\r\n  response => {\r\n  /**\r\n  * 下面的注释为通过response自定义code来标示请求状态，当code返回如下情况为权限有问题，登出并返回到登录页\r\n  * 如通过xmlhttprequest 状态码标识 逻辑可写在下面error中\r\n  */\r\n    const res = response.data\r\n    if (res.code === 403) {\r\n      // logout().then(() => {\r\n        // location.reload()// 为了重新实例化vue-router对象 避免bug\r\n        clearLoginInfo()\r\n        router.push({ name: 'login' })\r\n        return Promise.reject(response);\r\n      // })\r\n      // return Promise.reject('error')\r\n    } else {\r\n      return response\r\n    }\r\n  },\r\n  error => {\r\n    loading.close();\r\n    // let err = '系统崩溃';\r\n    // if(error && error.response) {\r\n    //   err = codeMessage[error.response.status]?codeMessage[error.response.status]:err;\r\n    // }\r\n    // message.showError(2,err);\r\n    // return Promise.reject(err);\r\n    clearLoginInfo()\r\n    router.push({ name: 'login' })\r\n    return Promise.reject(response);\r\n  })\r\nexport default service\r\n"]}]}